// app/api/sendMessage/route.ts
import { NextResponse } from "next/server";
import axios from "axios";
import { getGroups } from "@/db/db";

const BOT_TOKEN = process.env.NEXT_PUBLIC_BOT_TOKEN!;
const CHAT_ID = process.env.NEXT_PUBLIC_CHAT_ID!;

export async function POST(req: Request) {
  const body = await req.json();
  const { fullName, phone } = body;

  if (!fullName || !phone) {
    return NextResponse.json({ error: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è" }, { status: 400 });
  }

  const text = `
üë§ –ò–º—è: ${fullName} —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∏!
üìß –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${phone}.
  `;

  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç
    await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      chat_id: CHAT_ID,
      text,
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —á–∞—Ç—ã
    const chatIds = await getGroups();
    for (const id of chatIds) {
      try {
        await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
          chat_id: id,
          text,
        });
      } catch (err: any) {
        console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç ${id}:`, err?.response?.data || err.message);
      }
    }

    return NextResponse.json({ success: true });
  } catch (error: any) {
    console.error("–û—à–∏–±–∫–∞ Telegram:", error?.response?.data || error.message);
    return NextResponse.json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ" }, { status: 500 });
  }
}
